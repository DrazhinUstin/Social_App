generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  password_hash         String?
  github_id             Int?           @unique
  avatarUrl             String?
  bio                   String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  sessions              Session[]
  followedBy            Follows[]      @relation("following")
  following             Follows[]      @relation("followedBy")
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  bookmarks             Bookmark[]
  receivedNotifications Notification[] @relation("recipient")
  issuedNotifications   Notification[] @relation("issuer")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Follows {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
  @@map("follows")
}

model Post {
  id                   String         @id @default(cuid())
  authorId             String
  content              String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  author               User           @relation(references: [id], fields: [authorId], onDelete: Cascade)
  attachments          Media[]
  likes                Like[]
  comments             Comment[]
  bookmarks            Bookmark[]
  relatedNotifications Notification[]

  @@map("posts")
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  url       String
  mediaType MediaType
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)

  @@map("media")
}

enum MediaType {
  Image
  Video
}

model Like {
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  likedAt DateTime @default(now())

  @@id([postId, userId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Bookmark {
  id           String   @id @default(cuid())
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  bookmarkedAt DateTime @default(now())

  @@unique([postId, userId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid())
  recipient   User             @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  issuer      User             @relation("issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  issuerId    String
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications")
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}
